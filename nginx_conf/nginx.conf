##########################################
# PHP Microsite Boilerplate nginx config #
##########################################

# Important Notice: 
# This is more or less highly experimental, since the nginx conf is extremely powerful and with great power comes great responsibility. 
# Therefore, it is not really possible to have a cover-all-user-cases scheme here. 
# Feel free to propose any optimization via GitHub!


# Mind that http usually does not work, when deploying the conf file within the sites_enabled folder.
#http {


  # 7G FIREWALL - NGINX v1.6
  include /etc/nginx/conf.d/7g-firewall.conf;
  

  index index.php;


  # Force www by redirecting non-www to www (reverse this, if you want it the other way around) (remove this server block, if you are working with a sub-domain)
  server {
    # Double-check the port here - should be the same as below.
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    # Put your domain here (mind it has no wwww).
    server_name YOURDOMAIN.com;
    return 301 $https://www.$server_name$request_uri;
  }


  server {
    # We only go for port 443 with SSL here. Mind that we also use HTTP/2 - if not available, remove it. 
    # On Azure WebApps for example, you would only listen for port 8080 without any ssl or http2 setting.
    # Alternatively, you could also go for other parameters like spdy or "listen 443 quic reuseport;" (for HTTP/3) - depending on your nginx setup and version.
    listen 443 default_server ssl http2;
    listen [::]:443 default_server ssl http2 ipv6only=on;
    # Put your domain here (mind the www here)
    server_name www.YOURDOMAIN.com;
    # Define your application root here:
    root /home/site/wwwroot;


    # 7G FIREWALL - NGINX v1.6
    # @ https://perishablepress.com/7g-firewall-nginx/

    set $7g_reason "";
    set $7g_drop_bad_bot 0;
    set $7g_drop_bad_referer 0;
    set $7g_drop_bad_query_string 0;
    set $7g_drop_bad_request 0;
    set $7g_drop_bad_method 0;
    set $7g_drop 0;

    if ($bad_bot_7g) {
      set $7g_reason "${7g_reason}:bad_bot_${bad_bot_7g}:"; 
      set $7g_drop_bad_bot 1;
    }

    if ($bad_referer_7g) {
      set $7g_reason "${7g_reason}:bad_referer_${bad_referer_7g}:"; 
      set $7g_drop_bad_referer 1;
    }

    if ($bad_querystring_7g) {
      set $7g_reason "${7g_reason}:bad_querystring_${bad_querystring_7g}:"; 
      set $7g_drop_bad_query_string 1;
    }

    if ($bad_request_7g) {
      set $7g_reason "${7g_reason}:bad_request_${bad_request_7g}:"; 
      set $7g_drop_bad_request 1;
    }

    if ($not_allowed_method_7g) {
      set $7g_reason "${7g_reason}:not_allowed_method_${not_allowed_method_7g}:"; 
      set $7g_drop_bad_method 2;
    }

    if ($7g_drop_bad_bot) {
      set $args "${7g_reason}";
      set $7g_drop 1;
    }

    if ($7g_drop_bad_referer) {
      set $args "${7g_reason}";
      set $7g_drop 1;
    }

    if ($7g_drop_bad_query_string) {
      set $args "${7g_reason}";
      set $7g_drop 1;
    }

    if ($7g_drop_bad_request) {
      set $args "${7g_reason}";
      set $7g_drop 1;
    }

    if ($7g_drop_bad_method) {
      set $args "${7g_reason}";
      set $7g_drop 2;
    }

    if ($7g_drop = 1) {
      return 403;
    }

    if ($7g_drop = 2) {
      return 405;
    }


    # Security Headers
    # For testing and more details, see https://securityheaders.com/ .
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-XSS-Protection '1; mode=block';
    add_header X-Content-Type-Options nosniff;
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains; preload';
    add_header Referrer-Policy strict-origin-when-cross-origin;
    # Uses your domain from the server_name above here (or your wildcard *, if you experience any problems)
    add_header Access-Control-Allow-Origin 'https://'$server_name;
    # Adjust to your needs. GET should be enough for simple landingpages. Sometimes, you might need 'GET, POST'.
    add_header Access-Control-Allow-Methods 'GET, POST';
    # Be careful here. Enabling it limits you on what third-party tools you can include on your page. The provided configuration is only an example.
    add_header set Content-Security-Policy 'default-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.youtube-nocookie.com https://www.googletagmanager.com https://tagmanager.google.com https://www.google-analytics.com https://stats.g.doubleclick.net https://cookiehub.net data:; img-src 'self' https://www.gstatic.com https://ssl.gstatic.com https://i.ytimg.com https://stats.g.doubleclick.net https://www.google-analytics.com data:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.tailwindcss.com https://tagmanager.google.com https://www.googletagmanager.com https://www.google-analytics.com https://cookiehub.net';
    # Usually, you would not need any special browser features, so keep them set to 'none'. Some none intrusive things might be helpful for services like YouTube.
    add_header Permissions-Policy "geolocation=(),midi=(),sync-xhr=(),microphone=(),camera=(),magnetometer=(),gyroscope=(*),encrypted-media=(*),accelerometer=(*),payment=()";
    
    
    # The next 2 lines aim to hide the PHP version.
    fastcgi_hide_header X-Powered-By;
    fastcgi_hide_header X-CF-Powered-By;


    # Hide server identity and prevent directory listing
    autoindex off;
    server_tokens off;


    # Restrict access to .git
    location ~ /\.git { deny all; }


    # Restrict access to .htaccess and .htpasswd and nginx conf
    location = /nginx_conf { deny all; }
    location = /.htaccess { deny all; }
    location = /.htpasswd { deny all; }
    

    # Block XML-RPC if existent
    location = /xmlrpc.php { deny all; }


    # Restrict Hotlinking for the /assets/images folder, but not the social_media.png and other_open_sample.jpg files
    location ~ /assets/images/(?:(?!.*(social_media\.png|other_open_sample\.jpg)).)*$ {
      valid_referers none blocked server_names;
      if ($invalid_referer) {
        return 403;
      }
    }


    # Caching
    location ~* \.(ico|pdf|flv|swf|gif|png|jpg|jpeg|txt|svg|webmanifest|webp)$ {
      expires 30d;
      add_header Pragma "public";
      add_header Cache-Control "public";
    }
    location ~* \.(woff|woff2|eot|ttf|js|css|min.js|min.css)$ {
      expires 365d;
      add_header Pragma "public";
      add_header Cache-Control "public";
    }


    # Compression / Vary Accept-Encoding
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_types text/plain text/html text/xml text/css text/vtt text/x-component application/xml application/xhtml+xml application/rss+xml application/js application/javascript application/x-javascript application/x-httpd-php application/x-httpd-fastphp application/atom+xml application/json application/ld+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/webmanifest+json font/opentype font/woff font/woff2 application/x-font-woff application/x-font-woff2 image/svg+xml image/x-icon;
    gzip_proxied no-cache no-store private expired auth;


    # Disable ETags
    etag off;
    

    ## MAIN REWRITE ##
    location / {      
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto https;
      # Route through index.php.
      try_files $uri $uri/ /index.php?$args;
    }
    ## END MAIN REWRITE ##


    # PHP handling
    location ~ [^/]\.php(/|$) {
      fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
      include fastcgi_params;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_read_timeout 400;
      fastcgi_keep_conn on;
      fastcgi_buffers 256 16k;
      fastcgi_buffer_size 128k;
      fastcgi_busy_buffers_size 256k;
      # Mind that path here:
      fastcgi_pass 127.0.0.1:9000;
    }    
  }


  # Force HTTPS via redirecting port 80 (if needed at all)
  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
  }


#}
